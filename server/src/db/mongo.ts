// src/db/mongo.ts
import mongoose, { Schema, type ConnectOptions } from "mongoose";
import { env } from "../config/env";

/** DÃ©tection d'environnement */
const isProd = process.env.NODE_ENV === "production";

/** Options de connexion (ajuste au besoin) */
const options: ConnectOptions = {
  // En prod, laisse mongoose gÃ©rer l'autoIndex selon ton choix d'indexation
  autoIndex: !isProd,
  // poolSize, socketTimeoutMS, etc. peuvent Ãªtre ajoutÃ©s ici
};

/** Singleton pour hot-reload (Vite/tsx/nodemon/Next) */
declare global {
  // eslint-disable-next-line no-var
  var __mongoConn__: Promise<typeof mongoose> | undefined;
}

/** Debug + mÃ©triques simples des requÃªtes (dev uniquement) */
function setupDebug() {
  if (isProd) return;

  // Debug bas niveau: collection, mÃ©thode et paramÃ¨tres
  // (en Ã©vitant d'afficher les buffers/document volumineux)
  mongoose.set("debug", function (collectionName: string, methodName: string, ...methodArgs: any[]) {
    const argsPreview = JSON.stringify(methodArgs, (_k, v) => (v && v._id ? String(v._id) : v));
    console.log(`[mongo:debug] ${collectionName}.${methodName} args=${argsPreview}`);
  });
}

/** Plugin global: mesure de durÃ©e des opÃ©rations Mongoose */
function setupTimingPlugin() {
  const timingPlugin = (schema: Schema) => {
    // Une seule RegExp pour couvrir tous les hooks visÃ©s
    const ops = /^(count|countDocuments|find|findOne|updateOne|updateMany|aggregate|save)$/;

    schema.pre(ops, function preHook(this: any, next) {
      this.___start = Date.now();
      next();
    });

    // Signature gÃ©nÃ©rique (doc|result, next) â€” compatible avec save/find/etc.
    schema.post(ops, function postHook(this: any, _res: any, next: () => void) {
      const start = this.___start as number | undefined;
      if (!isProd && typeof start === "number") {
        const ms = Date.now() - start;
        const modelName = this?.model?.modelName ?? this?.constructor?.modelName ?? "UnknownModel";
        const op = this?.op ?? this?.constructor?.name ?? "op";
        console.log(`[mongo] ${modelName}.${String(op)} (${ms} ms)`);
      }
      next();
    });
  };

  mongoose.plugin(timingPlugin);
}


/** Connexion unique Ã  Mongo */
export async function connectMongo(): Promise<void> {
  // dÃ©jÃ  connectÃ©
  if (mongoose.connection.readyState === 1) return;

  // dÃ©jÃ  en cours de connexion
  if (globalThis.__mongoConn__) {
    await globalThis.__mongoConn__;
    return;
  }

  setupDebug();
  setupTimingPlugin();

  globalThis.__mongoConn__ = mongoose.connect(env.MONGO_URL, options);

  try {
    await globalThis.__mongoConn__;
    console.log("[mongo] connected");
  } catch (err) {
    // en cas dâ€™Ã©chec, nettoie le cache pour permettre une nouvelle tentative
    globalThis.__mongoConn__ = undefined;
    console.error("[mongo] connection error:", err);
    throw err;
  }

  // Ã‰vÃ©nements utiles
  mongoose.connection.on("disconnected", () => console.warn("[mongo] disconnected"));
  mongoose.connection.on("reconnected", () => console.log("[mongo] reconnected"));
  mongoose.connection.on("error", (e) => console.error("[mongo] error:", e));
}

/** DÃ©connexion explicite (utile dans certains tests/scripts) */
export async function disconnectMongo(): Promise<void> {
  if (mongoose.connection.readyState !== 0) {
    await mongoose.disconnect();
    globalThis.__mongoConn__ = undefined;
    console.log("[mongo] disconnected (manual)");
  }
}

/** Indicateur simple dâ€™Ã©tat de connexion (healthcheck app) */
export function mongoIsConnected(): boolean {
  return mongoose.connection.readyState === 1;
}

/* --------------------------------- SchÃ©mas --------------------------------- */

const AuditSchema = new mongoose.Schema(
  {
    at: { type: Date, default: Date.now, index: true },
    userId: { type: Number, index: true },
    action: { type: String, required: true, index: true },
    meta: { type: Schema.Types.Mixed },
  },
  {
    timestamps: true, // createdAt / updatedAt automatiques
    versionKey: false,
  }
);

// Index composÃ©s utiles pour les requÃªtes frÃ©quentes (ex: logs rÃ©cents dâ€™un user)
AuditSchema.index({ userId: 1, at: -1 });
AuditSchema.index({ action: 1, at: -1 });

export const AuditLog = mongoose.models.AuditLog || mongoose.model("AuditLog", AuditSchema);

/* ------------------------------ ArrÃªt propre ------------------------------- */

async function gracefulExit(signal: string) {
  try {
    console.log(`[mongo] Received ${signal}. Closing connection...`);
    await disconnectMongo();
  } catch (err) {
    console.error("[mongo] error during disconnect:", err);
  } finally {
    // on laisse le process sâ€™arrÃªter naturellement
  }
}

process.on("SIGINT", () => void gracefulExit("SIGINT"));
process.on("SIGTERM", () => void gracefulExit("SIGTERM"));

/**
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * ðŸŽ“ RÃ©sumÃ© pÃ©dagogique dÃ©taillÃ© (Mongo/Mongoose)
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * âœ… Singleton & hot-reload :
 *    - On met en cache la promesse de connexion dans `globalThis.__mongoConn__`
 *      pour Ã©viter dâ€™ouvrir N connexions en dev Ã  chaque reload.
 *
 * âœ… Logs & mÃ©triques :
 *    - `mongoose.set('debug', ...)` journalise les opÃ©rations (dev).
 *    - Un plugin global mesure le temps (ms) des requÃªtes (pre/post hooks).
 *
 * âœ… Options dev/prod :
 *    - `autoIndex` activÃ© en dev pour crÃ©er les index automatiquement.
 *      En prod, prÃ©fÃ¨re des migrations/commands dÃ©diÃ©es dâ€™indexation.
 *
 * âœ… SchÃ©ma Audit :
 *    - `timestamps` + index (simples et composÃ©s) pour des requÃªtes rapides
 *      du type Â« logs rÃ©cents par user Â» / Â« par type dâ€™action Â».
 *
 * âœ… ArrÃªt propre :
 *    - Gestion des signaux `SIGINT`/`SIGTERM` â†’ `disconnect()` propre.
 *
 * En rÃ©sumÃ© :
 * â†’ Une seule connexion, observable, et proprement fermÃ©e.
 * â†’ TraÃ§abilitÃ© des requÃªtes pour diagnostiquer les lenteurs.
 * â†’ SchÃ©ma de logs prÃªt pour la prod (index pertinents).
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 */
