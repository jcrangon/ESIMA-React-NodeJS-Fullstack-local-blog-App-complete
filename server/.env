# Mode / ports
NODE_ENV=development
PORT=8080
LOG_LEVEL=debug



# ============================================================================
# 📘 Résumé pédagogique complet — Comprendre les fichiers `.env.*`
# ----------------------------------------------------------------------------
# 🔹 1. Objectif des fichiers `.env`
#
# Les fichiers `.env` contiennent les variables de configuration nécessaires
# pour exécuter l’application **sans modifier le code source**.
#
# ✅ Ils permettent de :
#   - gérer les **mots de passe** et **clés secrètes** en toute sécurité,
#   - adapter l’application selon l’environnement d’exécution,
#   - centraliser toutes les informations de configuration.
#
# ----------------------------------------------------------------------------
# 🔹 2. Plusieurs fichiers selon l’environnement
#
# Tu utilises désormais différents fichiers `.env` :
#
#   📍 `.env.development`
#       → pour le développement : logs complets, erreurs visibles, hot-reload
#
#   📍 `.env.production`
#       → pour la production : performance, sécurité, secrets réels
#
# ℹ️ Le choix du bon fichier dépend de la valeur de `NODE_ENV`
#   - `NODE_ENV=development` ➜ charge `.env.development`
#   - `NODE_ENV=production` ➜ charge `.env.production`
#
# ----------------------------------------------------------------------------
# 🔹 3. Comment sont utilisées ces variables ?
#
# La librairie **dotenv** lit le bon fichier `.env.*`
# et met chaque variable dans `process.env`.
#
# Exemple :
#       console.log(process.env.PORT)
#       ➜ affichera `8080`
#
# ----------------------------------------------------------------------------
# 🔹 4. Explication des variables importantes
#
# NODE_ENV
#   Mode d’exécution (dev ou prod)
#   → change la façon dont l’app se comporte (logs, erreurs, optimisations)
#
# PORT
#   Port HTTP du serveur Express (ex : 8080)
#
# LOG_LEVEL
#   Niveau de verbosité des logs (debug/info/warn/error)
#
# D’autres variables existent dans `.env.production` :
#   - `DATABASE_URL` : connexion PostgreSQL
#   - `MONGO_URL`    : connexion MongoDB
#   - `JWT_ACCESS_SECRET` / `JWT_REFRESH_SECRET` : sécurité des tokens
#   - `CORS_ORIGIN`  : adresses front-end autorisées
#   - `UPLOAD_DIR`   : dossier des uploads
#
# Ces variables sont ensuite utilisées dans le code via un module centralisé
# (souvent `src/config/env.ts`) pour configurer :
#   ✅ la connexion à la base de données
#   ✅ la sécurité (JWT, cookies)
#   ✅ le serveur HTTP (CORS, PORT…)
#
# ----------------------------------------------------------------------------
# 🔹 5. Bonnes pratiques professionnelles
#
# ✅ Ne jamais publier un `.env` réel sur GitHub
# ✅ Créer un `.env.example` (valeurs neutres) pour le partager
# ✅ Toujours valider les variables au démarrage de l’app
# ✅ Différencier les secrets dev vs prod
# ✅ Utiliser un fichier `.env` par environnement :
#     - `.env.development`          (local)
#     - `.env.production`           (serveur / Docker)
#
# ----------------------------------------------------------------------------
# 💡 En résumé :
#
# Les fichiers `.env.*` rendent ton application :
#   🔒 plus sécurisée,
#   🛠️ plus flexible,
#   🎯 mieux adaptée aux différents environnements.
#
# Ils illustrent concrètement la séparation entre :
#   ➜ la **configuration** (dans `.env.*`)
#   ➜ le **code** (dans ton projet TypeScript)
#
# ============================================================================
