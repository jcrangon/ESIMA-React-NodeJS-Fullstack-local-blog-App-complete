import { defineConfig } from "vitest/config";
import react from "@vitejs/plugin-react";
import path from "node:path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: { "@": path.resolve(__dirname, "src") }
  },
  server: {
    host: true,         // Ã©coute sur 0.0.0.0 dans le conteneur
    port: 5173,
    strictPort: true,
    watch: {
      usePolling: true, // <â€” force le watcher Ã  sonder le FS
      interval: 300
    },
    hmr: {
      host: "localhost", // <â€” le navigateur se connecte Ã  lâ€™hÃ´te
      port: 5173         //     (le port mappÃ©)
      // clientPort: 5173 // alternative
    }
  },
  test: {
    environment: "jsdom",
    globals: true,
    setupFiles: "./src/setupTests.ts",
    css: true, // permet d'importer du CSS/SC dans les tests
    coverage: {
      provider: "v8",
      reporter: ["text", "html", "lcov"],
      reportsDirectory: "./coverage",
      include: ["src/**/*.{ts,tsx}"],
      exclude: ["src/**/__tests__/**", "src/**/*.d.ts"],
    },
  },
  preview: { port: 5173, strictPort: true },
  envPrefix: "VITE_",
  optimizeDeps: { include: ["styled-components"] }
  
});

/// ============================================================================
/// ðŸ“˜ RÃ©sumÃ© pÃ©dagogique â€” Configuration Vite + Vitest + Docker
/// ----------------------------------------------------------------------------
/// ðŸ”¹ Objectif du fichier
/// Ce fichier configure lâ€™environnement de dÃ©veloppement et de test :
///  - React + JSX / TS
///  - Docker-friendly HMR
///  - Alias `@` pour simplifier les imports
///  - Vitest (tests unitaires + coverage)
///
/// ðŸ”¹ Sections clÃ©s
/// âœ” `plugins` â†’ ajoute la gestion React dans Vite  
/// âœ” `resolve.alias` â†’ autorise import "@/components/Button"  
/// âœ” `server` â†’ hot reload fiable dans Docker / WSL  
/// âœ” `test` â†’ configure Vitest + RTL + jsdom  
/// âœ” `envPrefix` â†’ assure que seules les variables `VITE_` sont exposÃ©es au front  
/// âœ” `optimizeDeps.include` â†’ compile `styled-components` Ã  lâ€™avance pour Ã©viter les lenteurs
///
/// ðŸ”¹ Pourquoi jsdom en test ?
/// Simule le navigateur â†’ tests fiables sur composants React
///
/// ðŸ”¹ Pourquoi `globals: true`
/// Permet dâ€™utiliser `describe`, `it`, `expect` sans import explicite
///
/// ðŸ”¹ Pourquoi `coverage`
/// GÃ©nÃ¨re des rapports lisibles pour vÃ©rifier la couverture du code
///
/// ----------------------------------------------------------------------------
/// âœ… RÃ©sultat : une configuration prÃªte pour le dev moderne & les tests pro
/// ============================================================================