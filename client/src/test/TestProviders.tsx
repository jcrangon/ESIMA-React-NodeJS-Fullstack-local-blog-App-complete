import type { ReactNode } from "react";
import { ThemeProvider } from "styled-components";
import { MemoryRouter, type MemoryRouterProps  } from "react-router-dom";
import { theme } from "@/styles/theme";

type Props = Readonly<{
  children: ReactNode;
  initialEntries?: MemoryRouterProps["initialEntries"]; // <- InitialEntry[] | undefined (mutable)
}>;

export function TestProviders({  children, initialEntries = ["/"] }: Props) {
  return (
    <ThemeProvider theme={theme}>
      <MemoryRouter initialEntries={initialEntries}>{children}</MemoryRouter>
    </ThemeProvider>
  );
}

/// ============================================================================
/// ðŸ“˜ RÃ©sumÃ© pÃ©dagogique â€” Contexte global pour les tests UI
/// ----------------------------------------------------------------------------
/// ðŸ”¹ Objectif du composant
/// Ce composant **entoure** les composants testÃ©s avec :
///
/// âœ… Un ThemeProvider (styled-components)  
/// âœ… Un MemoryRouter (React Router)  
///
/// Cela permet Ã  tous les tests dâ€™utiliser :
/// - le thÃ¨me global
/// - les liens / navigation de React Router
///
/// sans avoir Ã  rÃ©pÃ©ter ces providers dans chaque test.
///
///
/// ðŸ”¹ Pourquoi `MemoryRouter` ?
/// - Simule la navigation **en mÃ©moire** (pas de vrai historique navigateur)
/// - IdÃ©al pour les tests unitaires + dâ€™intÃ©gration
/// - Permet de tester la navigation (`initialEntries`, `history.push`, â€¦)
///
///
/// ðŸ”¹ Typage des props (conforme SonarQube)
/// âœ… `Readonly<...>` â†’ immuabilitÃ© des props  
/// âœ… `ReactNode` â†’ accepte nâ€™importe quel Ã©lÃ©ment React  
/// âœ… `MemoryRouterProps['initialEntries']` â†’ garantit le bon type attendu  
///
/// Cela protÃ¨ge le composant contre :
/// ðŸš« modifications accidentelles des props  
/// ðŸš« mauvais typages des routes initiales
///
///
/// ðŸ”¹ Utilisation simplifiÃ©e
/// GrÃ¢ce Ã  un utilitaire comme `render()` dans `test-utils.tsx` :
/**
  render(<MonComposant />, { route: "/login" });
*/
/// Tout le contexte est automatiquement appliquÃ© âœ…
///
/// ----------------------------------------------------------------------------
/// âœ… RÃ©sultat : des tests plus simples, lisibles et robustes
/// ============================================================================