import "styled-components";
import type { ThemeType } from "./theme";

declare module "styled-components" {
  export interface DefaultTheme extends ThemeType {}
}


/// ============================================================================
/// üìò R√©sum√© p√©dagogique ‚Äî Gestion d‚Äôun th√®me UI avec styled-components
/// ----------------------------------------------------------------------------
/// üîπ Objectif du fichier
/// Ce fichier d√©finit un **th√®me centralis√©** pour toute l‚Äôapplication.
/// Gr√¢ce √† styled-components et au TypeScript, on peut utiliser ces valeurs
/// dans tous les composants avec auto-compl√©tion et s√©curit√© de types.
///
/// üîπ Int√©r√™t du th√®me
/// ‚úî Assure la coh√©rence graphique globale (couleurs, typo, spacing‚Ä¶)  
/// ‚úî Evite les valeurs √©crites "en dur" dans les composants (anti-duplication)  
/// ‚úî Permet de **changer l‚Äôidentit√© visuelle rapidement** (dark/light theme‚Ä¶)  
/// ‚úî Facilite l‚Äôaccessibilit√© et la maintenance de l‚ÄôUI
///
/// üîπ Structure du th√®me
/// - `colors` : toutes les couleurs utilis√©es par l‚Äôinterface
/// - `fonts` : polices principales et alternatives
/// - `spacing` : √©chelle d‚Äôespacement r√©utilisable (`factor √ó 8px`)
/// - `radius` : arrondi uniformis√© des √©l√©ments UI
/// - `transition` : transitions par d√©faut des animations UI
///
/// üîπ Typage automatique
/// La ligne `as const` permet √† TypeScript de figer les valeurs et de cr√©er
/// un type pr√©cis et immuable.  
/// Puis `ThemeType = typeof theme` permet au reste du projet de conna√Ætre
/// exactement la structure du th√®me (autocompl√©tion dans les composants).
///
/// üîπ Fonctionnement avec styled-components
/// Le fichier `styled.d.ts` fusionne ce type avec `DefaultTheme`, de sorte
/// que `({ theme }) => theme.colors.primary` soit **totalement typ√©**.
/// ============================================================================